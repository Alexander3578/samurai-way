{"version":3,"file":"static/js/600.0a3bac7d.chunk.js","mappings":"4OAMMA,EAAUC,EAAAA,GAAAA,IAAH,8EAOPC,EAAeD,EAAAA,GAAAA,IAAH,0CAIZE,EAAaF,EAAAA,GAAAA,IAAH,0BAIVG,GAAYH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,0BAMTK,EAAWL,EAAAA,GAAAA,IAAH,0CAIRM,EAAUN,EAAAA,GAAAA,IAAH,0BAIPO,EAAkBP,EAAAA,GAAAA,KAAH,4EAeRQ,EAAI,CACbT,QAAAA,EACAE,aAAAA,EACAC,WAAAA,EACAC,UAAAA,EACAE,SAAAA,EACAC,QAAAA,EACAG,cAhBiBT,EAAAA,EAAAA,IAAOU,EAAAA,EAAPV,CAAH,kEAiBdW,kBAZsBX,EAAAA,GAAAA,OAAH,yCAanBO,gBAAAA,G,UCnDSL,EAA2C,SAAC,GAAgB,IAAfU,EAAc,EAAdA,KAAMC,EAAQ,EAARA,GAE5D,OACI,SAACL,EAAEN,WAAH,WACI,SAACM,EAAEL,UAAH,CAAaW,GAAE,mBAAcD,GAA7B,SAAoCD,KADrBC,ICHdP,EAAqC,SAACS,GAE/C,IAAOH,EAAYG,EAAZH,KAAMC,EAAME,EAANF,GAEb,OACI,SAACL,EAAEF,QAAH,UACKM,GADWC,I,8BCUXG,GAAoBC,EAAAA,EAAAA,GAAqC,CAClEC,KAAM,yBADuBD,EAb8C,SAACF,GAC5E,OACI,UAACP,EAAED,gBAAH,CAAmBY,SAAUJ,EAAMK,aAAnC,WACI,SAACZ,EAAEC,aAAH,CAAgBY,UAAWC,EAAAA,EACXC,QAAQ,WACRX,KAAK,iBACLY,YAAa,sBACbC,SAAU,CAACC,EAAAA,MAC3B,SAAClB,EAAEG,kBAAH,yB,8BCkBZ,GAAegB,EAAAA,EAAAA,IACXC,EAAAA,GACAC,EAAAA,EAAAA,KAjBkB,SAACC,GACnB,MAAO,CACHC,WAAYD,EAAME,QAAQD,WAC1BE,aAAcH,EAAME,QAAQC,iBAIX,SAACC,GACtB,MAAO,CACHC,cAAe,SAACC,GAAD,OAA4BF,GAASG,EAAAA,EAAAA,GAAaD,SAMzE,EC7BmD,SAAC,GAIO,IAHHL,EAGE,EAHFA,WACAE,EAEE,EAFFA,aACAE,EACE,EADFA,cAGhDG,EAAcP,EAAWQ,KAAI,SAACC,GAAD,OAAiC,SAAC,EAAD,CAA4B5B,KAAM4B,EAAO5B,KAC7BC,GAAI2B,EAAO3B,IADN2B,EAAO3B,OAGtF4B,EAAeR,EAAaM,KAAI,SAACG,GAAD,OAA+B,SAAC,EAAD,CAA0B9B,KAAM8B,EAAQ9B,KAC/BC,GAAI6B,EAAQ7B,IADP6B,EAAQ7B,OAOzF,OACI,UAACL,EAAET,QAAH,YACI,SAACS,EAAEP,aAAH,UAEQqC,KAGR,UAAC9B,EAAEH,SAAH,WAEQoC,GAEJ,SAACzB,EAAD,CAAmBG,SAfH,SAACwB,GACzBR,EAAcQ,EAAsBC,6B,gICXtCC,EAAkB,SAACf,GACrB,MAAO,CACHgB,OAAQhB,EAAMiB,KAAKD,SAIdlB,EAAmB,SAAKoB,GACjC,OAAOnB,EAAAA,EAAAA,IAAQgB,EAARhB,EAAyB,SAACd,GAE7B,IAAK+B,EAAwB/B,EAAxB+B,OAAWG,GAAhB,OAA6BlC,EAA7B,GAEA,OAAO+B,GAAS,SAACE,GAAD,UAAeC,KAAoB,SAAC,KAAD,CAAUnC,GAAI","sources":["components/dialogs/Dialogs_Styles.ts","components/dialogs/dialogItem/DialogItem.tsx","components/dialogs/messageItem/MessageItem.tsx","components/dialogs/dialogMessageForm/DialogMessageForm.tsx","components/dialogs/DialogsContainer.tsx","components/dialogs/Dialogs.tsx","hoc/AuthRedirect.tsx"],"sourcesContent":["import styled from 'styled-components';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {Field} from 'redux-form';\r\n\r\n//DIALOGS\r\n\r\nconst Dialogs = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 2fr 10fr;\r\n`\r\n\r\n//DIALOG ITEMS\r\n\r\nconst DialogsItems = styled.div`\r\n  padding: 10px;\r\n`\r\n\r\nconst DialogItem = styled.div`\r\n\r\n`\r\n\r\nconst MyNavLink = styled(NavLink)`\r\n\r\n`\r\n\r\n//MESSAGES\r\n\r\nconst Messages = styled.div`\r\n  padding: 10px;\r\n`\r\n\r\nconst Message = styled.div`\r\n\r\n`\r\n\r\nconst SendMessageWrap = styled.form`\r\n  display: flex;\r\n  gap: 10px;\r\n  margin-top: 5px;\r\n`\r\n\r\nconst MessageField = styled(Field)`\r\n  resize: none;\r\n  outline: transparent;\r\n`\r\n\r\nconst SendMessageButton = styled.button`\r\n  height: 36px;\r\n`\r\n\r\nexport const S = {\r\n    Dialogs,\r\n    DialogsItems,\r\n    DialogItem,\r\n    MyNavLink,\r\n    Messages,\r\n    Message,\r\n    MessageField,\r\n    SendMessageButton,\r\n    SendMessageWrap\r\n}","import React from 'react';\r\nimport { S } from '../Dialogs_Styles';\r\n\r\nexport type DialogItemPropsType = {\r\n    name: string\r\n    id: string\r\n}\r\n\r\nexport const DialogItem:React.FC<DialogItemPropsType> = ({name, id}) => {\r\n\r\n    return(\r\n        <S.DialogItem key={id}>\r\n            <S.MyNavLink to={`/dialogs/${id}`}>{name}</S.MyNavLink>\r\n        </S.DialogItem>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport { S } from '../Dialogs_Styles';\r\n\r\nexport type MessagePropsType = {\r\n    name: string\r\n    id: string\r\n}\r\n\r\nexport const Message:React.FC<MessagePropsType> = (props) => {\r\n\r\n    const {name, id} = props\r\n\r\n    return(\r\n        <S.Message key={id}>\r\n            {name}\r\n        </S.Message>\r\n    )\r\n}","import React from 'react';\r\nimport {S} from '../Dialogs_Styles';\r\nimport {InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {FormControl} from '../../comman/formControls/FormControls';\r\nimport {requiredField} from '../../../utils/validators/validators';\r\n\r\nexport type SendMessageFormValuesType = {\r\n    newMessageText: string\r\n}\r\n\r\nconst SendMessageForm:React.FC<InjectedFormProps<SendMessageFormValuesType>> = (props) => {\r\n    return (\r\n        <S.SendMessageWrap onSubmit={props.handleSubmit}>\r\n            <S.MessageField component={FormControl}\r\n                            tagName='textarea'\r\n                            name='newMessageText'\r\n                            placeholder={'Enter your message!'}\r\n                            validate={[requiredField]}/>\r\n            <S.SendMessageButton>Send</S.SendMessageButton>\r\n        </S.SendMessageWrap>\r\n    );\r\n};\r\n\r\nexport const DialogMessageForm = reduxForm<SendMessageFormValuesType>({\r\n    form: 'sendDialogMessageForm'\r\n})(SendMessageForm);","import React from 'react';\r\nimport {DialogItemPropsType} from './dialogItem/DialogItem';\r\nimport {MessagePropsType} from './messageItem/MessageItem';\r\nimport {connect} from 'react-redux';\r\nimport {AppDispatch, AppStateType} from 'redux/redux-store';\r\nimport {Dialogs} from './Dialogs';\r\nimport {compose} from 'redux';\r\nimport {addMessageAC} from '../../redux/dialog-reducer';\r\nimport {withAuthRedirect} from '../../hoc/AuthRedirect';\r\n\r\ntype MapStateToPropsType = {\r\n    dialogData: Array<DialogItemPropsType>\r\n    messagesData: MessagePropsType[]\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addNewMessage: (newMessageBody: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogData: state.dialogs.dialogData,\r\n        messagesData: state.dialogs.messagesData,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: AppDispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addNewMessage: (newMessageBody: string) => dispatch(addMessageAC(newMessageBody))\r\n    }\r\n}\r\n\r\n// export const DialogsContainer = withAuthRedirect(connect(mapStateToProps, mapDispatchToProps)(Dialogs));\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, mapDispatchToProps)\r\n)(Dialogs)","import React from 'react';\r\nimport {DialogItem, DialogItemPropsType} from './dialogItem/DialogItem';\r\nimport {Message, MessagePropsType} from './messageItem/MessageItem';\r\nimport {S} from './Dialogs_Styles'\r\nimport {DialogsPropsType} from './DialogsContainer';\r\nimport {DialogMessageForm, SendMessageFormValuesType} from './dialogMessageForm/DialogMessageForm';\r\n\r\nexport const Dialogs: React.FC<DialogsPropsType> = ({\r\n                                                        dialogData,\r\n                                                        messagesData,\r\n                                                        addNewMessage\r\n                                                    }) => {\r\n\r\n    let dialogItems = dialogData.map((dialog: DialogItemPropsType) => <DialogItem key={dialog.id} name={dialog.name}\r\n                                                                                  id={dialog.id}/>)\r\n\r\n    let messageItems = messagesData.map((message: MessagePropsType) => <Message key={message.id} name={message.name}\r\n                                                                                id={message.id}/>)\r\n\r\n    const onSendMessageSubmit = (sendMessageFormValues: SendMessageFormValuesType) => {\r\n        addNewMessage(sendMessageFormValues.newMessageText)\r\n    }\r\n\r\n    return (\r\n        <S.Dialogs>\r\n            <S.DialogsItems>\r\n                {\r\n                    dialogItems\r\n                }\r\n            </S.DialogsItems>\r\n            <S.Messages>\r\n                {\r\n                    messageItems\r\n                }\r\n                <DialogMessageForm onSubmit={onSendMessageSubmit}/>\r\n            </S.Messages>\r\n        </S.Dialogs>\r\n    );\r\n};\r\n\r\n","import {Redirect} from 'react-router-dom';\r\nimport React, {ComponentType} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from 'redux/redux-store';\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst MapStateToProps = (state: AppStateType):MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport const withAuthRedirect = <T,>(Component: ComponentType<T>) => {\r\n    return connect(MapStateToProps)((props:MapStateToPropsType) => {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        return isAuth ? <Component {...restProps as T}/> : <Redirect to={'/login'}/>\r\n    })\r\n}"],"names":["Dialogs","styled","DialogsItems","DialogItem","MyNavLink","NavLink","Messages","Message","SendMessageWrap","S","MessageField","Field","SendMessageButton","name","id","to","props","DialogMessageForm","reduxForm","form","onSubmit","handleSubmit","component","FormControl","tagName","placeholder","validate","requiredField","compose","withAuthRedirect","connect","state","dialogData","dialogs","messagesData","dispatch","addNewMessage","newMessageBody","addMessageAC","dialogItems","map","dialog","messageItems","message","sendMessageFormValues","newMessageText","MapStateToProps","isAuth","auth","Component","restProps"],"sourceRoot":""}