{"version":3,"file":"static/js/170.4d81ee05.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/profile/profileInfotsx/ProfileInfo.module.css?c4c0","components/profile/profileInfotsx/profileStatus/ProfileHookStatus.tsx","components/profile/profileInfotsx/ProfileInfo.tsx","webpack://samurai-way/./src/components/profile/myPosts/post/Post.module.css?d4ae","components/profile/myPosts/post/Post.tsx","webpack://samurai-way/./src/components/profile/myPosts/MyPosts.module.css?15f4","components/profile/myPosts/addPostProfileForm/AddPostProfileForm.tsx","components/profile/myPosts/MyPosts.tsx","components/profile/myPosts/post/MyPostsContainer.tsx","components/profile/Profile.tsx","components/profile/ProfileContainer.tsx","hoc/AuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contentImg\":\"ProfileInfo_contentImg__dIzlQ\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__rvq6C\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileHookStatusProps = {\r\n    status: string\r\n    updateProfileStatus: (status: string) => void\r\n    authId: number | null\r\n    userId: number\r\n}\r\n\r\nexport const ProfileHookStatus: React.FC<ProfileHookStatusProps> = React.memo((props: ProfileHookStatusProps) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    const [status, setStatus] = useState<string>(props.status);\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status);\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        if (props.authId !== props.userId)\r\n            return\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateProfileStatus(status);\r\n    }\r\n\r\n    const onStatusChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode\r\n                ?\r\n                <div>\r\n                    <span style={{minWidth: '80px', minHeight: '20px', display: 'inline-block'}}\r\n                          onDoubleClick={activateEditMode}>\r\n                        {props.status}\r\n                    </span>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <input value={status}\r\n                           onBlur={deactivateEditMode}\r\n                           onChange={onStatusChangeHandler}\r\n                           autoFocus/>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n});\r\n\r\n","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {ProfileUserType} from '../../../redux/profile-reducer';\r\nimport {Preloader} from '../../comman/preloader/Preloader';\r\nimport {ProfileHookStatus} from './profileStatus/ProfileHookStatus';\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileUserType | null\r\n    status: string\r\n    updateProfileStatus: (status: string) => void\r\n    authId: number | null\r\n}\r\n\r\nexport const ProfileInfo:React.FC<ProfileInfoPropsType> = (props) => {\r\n    return !props.profile\r\n        ? <Preloader/>\r\n        : <div>\r\n            {/*<div className={s.contentImg}>*/}\r\n            {/*    <img src=\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Best_Nature_Picture_of_the_day.jpg\" alt={'view'}/>*/}\r\n            {/*</div>*/}\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile?.photos.small} alt={'user photo'}/>\r\n                {props.profile?.fullName}\r\n                <ProfileHookStatus status={props.status}\r\n                               updateProfileStatus={props.updateProfileStatus}\r\n                               authId={props.authId}\r\n                               userId={props.profile.userId}/>\r\n            </div>\r\n        </div>\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__-6T9v\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nexport type PostPropsType = {\r\n    postName: string\r\n    id: string\r\n    likesCount: number\r\n}\r\n\r\nexport const Post: React.FC<PostPropsType> = (props) => {\r\n\r\n    const {postName, likesCount, id} = props\r\n\r\n    return (\r\n        <div key={id} className={s.item}>\r\n            <img src={'https://i.pinimg.com/originals/10/ad/ab/10adabc386ba646f7df5f4e4d3156272.jpg'} alt='ava'/>\r\n            {postName}\r\n            <div>\r\n                <span>{likesCount}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postBlock\":\"MyPosts_postBlock__M05SS\",\"posts\":\"MyPosts_posts__jUZjK\"};","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, requiredField} from '../../../../utils/validators/validators';\r\nimport {FormControl} from '../../../comman/formControls/FormControls';\r\n\r\nexport type PostProfileFormType = {\r\n    postText: string\r\n}\r\n\r\nconst maxLength30 = maxLengthCreator(30);\r\n\r\nconst PostProfileForm:React.FC<InjectedFormProps<PostProfileFormType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={FormControl}\r\n                   tagName='textarea'\r\n                   name='postText'\r\n                   placeholder='Write new post...'\r\n                   validate={[requiredField, maxLength30]}></Field>\r\n            <div>\r\n                <button>Add Post</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport const AddPostProfileForm = reduxForm<PostProfileFormType>({\r\n    form: 'addPostProfileForm'\r\n})(PostProfileForm);","import React from 'react';\r\nimport {Post, PostPropsType} from './post/Post';\r\nimport s from './MyPosts.module.css'\r\nimport {MyPostsPropsType} from './post/MyPostsContainer';\r\nimport {AddPostProfileForm, PostProfileFormType} from './addPostProfileForm/AddPostProfileForm';\r\n\r\nexport const MyPosts: React.FC<MyPostsPropsType> = React.memo((props: MyPostsPropsType) => {\r\n    const {postData, addPost} = props\r\n\r\n    const onAddPostSubmit = (postProfileFormValues: PostProfileFormType): void => {\r\n        addPost(postProfileFormValues.postText);\r\n    }\r\n\r\n    const postItems = postData.map((item: PostPropsType) => <Post key={item.id}\r\n                                                                  postName={item.postName}\r\n                                                                  id={item.id}\r\n                                                                  likesCount={item.likesCount}/>)\r\n    return (\r\n        <div className={s.postBlock}>\r\n            <h3>My Posts</h3>\r\n            <AddPostProfileForm onSubmit={onAddPostSubmit}/>\r\n            <div className={s.posts}>\r\n                {\r\n                    postItems\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\n","import React from 'react';\r\nimport {MyPosts} from '../MyPosts';\r\nimport {PostPropsType} from './Post';\r\nimport {addPostAC} from '../../../../redux/profile-reducer';\r\nimport {connect} from 'react-redux';\r\nimport {AppActionType, AppStateType} from '../../../../redux/redux-store';\r\n\r\ntype MapStateToPropsType = {\r\n    postData: PostPropsType[]\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost: (newPostBody: string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = MapDispatchToPropsType & MapStateToPropsType;\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        postData: state.profile.postData\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: (action: AppActionType) => void): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostBody: string) => dispatch(addPostAC(newPostBody))\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\n","import React from 'react';\r\nimport {ProfileInfo} from './profileInfotsx/ProfileInfo';\r\nimport {MyPostsContainer} from './myPosts/post/MyPostsContainer';\r\nimport {ProfilePropsType} from './ProfileContainer';\r\n\r\n\r\nexport const Profile: React.FC<ProfilePropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile = {props.profile}\r\n                         status={props.status}\r\n                         updateProfileStatus={props.updateProfileStatus}\r\n                         authId={props.authId}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport {Profile} from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {withAuthRedirect} from '../../hoc/AuthRedirect';\r\nimport {\r\n    getProfileStatusTC,\r\n    getProfileUserTC,\r\n    ProfileUserType,\r\n    updateProfileStatusTC\r\n} from '../../redux/profile-reducer';\r\n\r\nclass ProfileApi extends React.Component<PropsType, ProfilePropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId && this.props.match.params.userId !== ':userId'\r\n            ? this.props.match.params.userId : this.props.authId\r\n        this.props.getProfileUser(Number(userId));\r\n        this.props.getProfileStatus(Number(userId))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateProfileStatus={this.props.updateProfileStatus}\r\n                     authId={this.props.authId}/>\r\n        )\r\n    };\r\n}\r\n\r\nexport type ProfilePropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\ntype PropsType = RouteComponentProps<paramsType> & ProfilePropsType\r\n\r\ntype mapStateToPropsType = {\r\n    profile: ProfileUserType | null\r\n    status: string\r\n    authId: number | null\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    getProfileUser: (userId: number | null) => void\r\n    getProfileStatus: (userId: number | null) => void\r\n    updateProfileStatus: (status: string) => void\r\n}\r\n\r\ntype paramsType = {\r\n    userId: string\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        profile: state.profile.profile,\r\n        status: state.profile.status,\r\n        authId: state.auth.id\r\n    }\r\n}\r\n\r\n// const withURLDataContainerComponent = withRouter(ProfileApi)\r\n\r\n// export const ProfileContainer = withAuthRedirect(connect(mapStateToProps, {getProfileUser: getProfileUserTC})(withURLDataContainerComponent))\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, {\r\n        getProfileUser: getProfileUserTC, getProfileStatus: getProfileStatusTC,\r\n        updateProfileStatus: updateProfileStatusTC\r\n    }),\r\n    withRouter,\r\n)(ProfileApi)","import {Redirect} from 'react-router-dom';\r\nimport React, {ComponentType} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from 'redux/redux-store';\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst MapStateToProps = (state: AppStateType):MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport const withAuthRedirect = <T,>(Component: ComponentType<T>) => {\r\n    return connect(MapStateToProps)((props:MapStateToPropsType) => {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        return isAuth ? <Component {...restProps as T}/> : <Redirect to={'/login'}/>\r\n    })\r\n}"],"names":["ProfileHookStatus","React","props","useState","editMode","setEditMode","status","setStatus","useEffect","value","onBlur","updateProfileStatus","onChange","e","currentTarget","autoFocus","style","minWidth","minHeight","display","onDoubleClick","authId","userId","ProfileInfo","profile","className","s","src","photos","small","alt","fullName","Preloader","Post","postName","likesCount","id","maxLength30","maxLengthCreator","AddPostProfileForm","reduxForm","form","onSubmit","handleSubmit","Field","component","FormControl","tagName","name","placeholder","validate","requiredField","MyPosts","postData","addPost","postItems","map","item","postProfileFormValues","postText","MyPostsContainer","connect","state","dispatch","newPostBody","addPostAC","Profile","ProfileApi","this","match","params","getProfileUser","Number","getProfileStatus","compose","withAuthRedirect","auth","getProfileUserTC","getProfileStatusTC","updateProfileStatusTC","withRouter","MapStateToProps","isAuth","Component","restProps","to"],"sourceRoot":""}